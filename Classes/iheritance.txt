class C(object):
    @classmethod
    def fun(cls, arg1, arg2, ...):
       ....
fun: function that needs to be converted into a class method
returns: a class method for function
A class method is a method which is bound to the class and not the object of the class.
They have the access to the state of the class as it takes a class parameter that points to the class and not the object instance.
It can modify a class state that would apply across all the instances of the class. For example it can modify a class variable that will be applicable to all the instances.
cacms student
2:20 PM
A static method does not receive an implicit first argument.
Syntax:

class C(object):
    @staticmethod
    def fun(arg1, arg2, ...):
        ...
returns: a static method for function fun.
A static method is also a method which is bound to the class and not the object of the class.
A static method can’t access or modify class state.
It is present in a class because it makes sense for the method to be present in class.
Class method vs Static Method

A class method takes cls as first parameter while a static method needs no specific parameters.
A class method can access or modify class state while a static method can’t access or modify it.
In general, static methods know nothing about class state. They are utility type methods that take some parameters and work upon those parameters. On the other hand class methods must have class as parameter.
cacms student
2:21 PM
We use @classmethod decorator in python to create a class method and we use @staticmethod decorator to create a static method in python.
cacms student
2:28 PM
from datetime import date 
  
class Person: 
    def __init__(self, name, age): 
        self.name = name 
        self.age = age 
      
    # a class method to create a Person object by birth year. 
    @classmethod
    def fromBirthYear(cls, name, year): 
        return cls(name, date.today().year - year) 
      
    # a static method to check if a Person is adult or not. 
    @staticmethod
    def isAdult(age): 
        return age > 18
  
person1 = Person('mayank', 21) 
person2 = Person.fromBirthYear('mayank', 1996) 
  
print (person1.age) 
print (person2.age )
  
# print the result 
print (Person.isAdult(22) )
cacms student
2:32 PM
Python Inheritance Syntax
class BaseClass:
  Body of base class
class DerivedClass(BaseClass):
  Body of derived class
Vritesh Malhotra
2:37 PM
no mam
sourabh sharma
2:37 PM
no mam
cacms student
2:37 PM
# parent class 
class Person( object ):     
  
        # __init__ is known as the constructor          
        def __init__(self, name, idnumber):    
                self.name = name 
                self.idnumber = idnumber 
        def display(self): 
                print(self.name) 
                print(self.idnumber) 
  
# child class 
class Employee( Person ):            
        def __init__(self, name, idnumber, salary, post): 
                self.salary = salary 
                
self.post = post 
  
                # invoking the __init__ of the parent class  
                Person.__init__(self, name, idnumber)  
  
                  
# creation of an object variable or an instance 
a = Person('Rahul', 886012)     
  
# calling a function of the class Person using its instance 
a.display() 
e = Employee('Rahul', 886012,60000,'manager') 
e.display() 
If you forget to invoke the __init__() of the parent class then its instance variables would not be available to the child class.
sourabh sharma
2:39 PM
yes mam
?????? ????
2:39 PM
yes
cacms student
2:40 PM
class Base1(object): 
    def __init__(self): 
        self.str1 = “python1"
        print "Base1"
  
class Base2(object): 
    def __init__(self): 
        self.str2 = “python2"        
        print "Base2"
  
class Derived(Base1, Base2): 
    def __init__(self): 
          
        # Calling constructors of Base1 
        # and Base2 classes 
        Base1.__init__(self) 
        Base2.__init__(self) 
        print "Derived"
          
    def printStrs(self): 
       
        print(self.str1, self.str2) 
         
  
ob = Derived() 
ob.printStrs() 
cacms student
2:41 PM
class Base(object): 
      
    # Constructor 
    def __init__(self, name): 
        self.name = name 
  
    # To get name 
    def getName(self): 
        return self.name 

# Inherited or Sub class (Note Person in bracket) 
class Child(Base): 
      
    # Constructor 
    def __init__(self, name, age): 
        Base.__init__(self, name) 
        self.age = age 
  








    # To get name 
    def getAge(self): 
        return self.age 
 



 
# Inherited or Sub class (Note Person in bracket) 
class GrandChild(Child): 
      
    # Constructor 
    def __init__(self, name, age, address): 
        Child.__init__(self, name, age) 
        self.address = address 
  
    # To get address 
    def getAddress(self): 
        return self.address         
  
# Driver code 
g = GrandChild("python1", 23, "Noida")   
print(g.getName(), g.getAge(), g.getAddress()) 
cacms student
2:44 PM
# Python program to demonstrate private members 
# of the parent class 
class C(object): 
       def __init__(self): 
              self.c = 21
  
              # d is private instance variable  
              self.__d = 42    
class D(C): 
       def __init__(self): 
              self.e = 84
              C.__init__(self) 
object1 = D() 
  
sourabh sharma
2:46 PM
yes mam
?????? ????
2:46 PM
yes
cacms student
2:46 PM
class Mammal(object):
  def __init__(self, mammalName):
    print(mammalName, 'is a warm-blooded animal.')
    
class Dog(Mammal):
  def __init__(self):
    print('Dog has four legs.')
    super().__init__('Dog')
    
d1 = Dog()
cacms student
2:48 PM
# parent class
class Animal:
  # properties
	multicellular = True
	# Eukaryotic means Cells with Nucleus
	eukaryotic = True
	
	# function breath
	def breathe(self):
	    print("I breathe oxygen.")
    
  # function feed
	def feed(self):
	    print("I eat food.")
	    
# child class	    
class Herbivorous(Animal):
    
    # function feed
	def feed(self):
	    super().feed()
	    print("I eat only plants. I am vegetarian.")
      
herbi = Herbivorous()
herbi.feed()
# calling some other function
herbi.breathe()
cacms student
2:49 PM
pandas 
anaconda
spyder / jupyter 
vscode
django--vscode 
anaconda
cacms student
2:50 PM
numpy,pandas
graphs,plots-matplotlib,seaborn 
scikit-machine learning 
You
2:51 PM
ok